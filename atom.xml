<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[龚亮之塔]]></title>
  <link href="http://Mark-SS.github.io/atom.xml" rel="self"/>
  <link href="http://Mark-SS.github.io/"/>
  <updated>2014-05-12T14:36:59+08:00</updated>
  <id>http://Mark-SS.github.io/</id>
  <author>
    <name><![CDATA[龚亮]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AprilBeacon使用说明]]></title>
    <link href="http://Mark-SS.github.io/blog/2014/05/12/aprilbeaconshi-yong-shuo-ming/"/>
    <updated>2014-05-12T09:50:58+08:00</updated>
    <id>http://Mark-SS.github.io/blog/2014/05/12/aprilbeaconshi-yong-shuo-ming</id>
    <content type="html"><![CDATA[<h1>软件简介</h1>

<h2>软件介绍</h2>

<h3>软件主要分为三大模块。</h3>

<h4>1、Beacons界面</h4>

<ul>
<li>搜索附近的beacon，包括信息有Major，minor， 距离。<br/>
<img src="http://www.markss.cn/images/AprilBeacon/beacons.png" alt="" /></li>
<li>点击进入可以看到beacon距离和rssi强度
<img src="http://www.markss.cn/images/AprilBeacon/beacon-range/png" alt="" /></li>
</ul>


<h4>2、工具界面：主要可以修改beacon的一些参数。</h4>

<p> <img src="http://www.markss.cn/images/AprilBeacon/tools.png" alt="" /></p>

<h5>主要说一下工具里面的一些常用功能。</h5>

<p> 其中设备进入可以查看周围有哪些蓝牙设备，在AprilBeacon里面目前暂时只显示名字叫AprilBeacon和BlueBeacon的蓝牙。<br/>
 <img src="http://www.markss.cn/images/AprilBeacon/tools-devices.png" alt="" /><br/>
 点击单个设备进入可以看到设备一些详细信息<br/>
 <img src="http://www.markss.cn/images/AprilBeacon/devices-detail.png" alt="" /><br/>
 点击<img src="http://www.markss.cn/images/AprilBeacon/device-modified-button.png" alt="" />可以进入到修改设备参数界面<br/>
 <img src="http://www.markss.cn/images/AprilBeacon/tools-device-modifiy.png" alt="" /><br/>
&ndash; ProximimityUUID 格式必须是: ※※※※※※※※-※※※※-※※※※-※※※※-※※※※※※※※※※※※（&#8217;※&#8217; 字母或者数字， 8位-4位-4位-4位-12位 例如:E2C56DB5-DFFB-48D2-B060-D0F5A71096E0）
&ndash; Major 范围是：0-65535
&ndash; Minor 范围是：0-65535
&ndash; Measured Power 范围是：-255-1
&ndash; Tx Power（发射功率）： 0dBm，4dBm，-6dBm，-23dBm四个值。
&ndash; 广播频率的范围是：100ms-1000ms
&ndash; 新密码：12位<br/>
保存时候需要你输入beacon验证密码（默认为 AprilBrother,注意大小写），修改完成之后会自动重启beacon，无需手动去beacon上按钮重启。</p>

<ul>
<li>批量修改界面如下<br/>
<img src="http://www.markss.cn/images/AprilBeacon/tools-configure.png" alt="" /><br/>
ProximimityUUID, major, minor, mesasured Power, 密码格式同上， 其中major， minor可以选择是否自增。 当ProximimityUUID填写后，会自动把周围能搜索到的此uuid的设备信息修改（其中有个注意的地方，如果某个beacon的密码和你修改时候输入的校对密码不一致会导致此个beacon修改失败）。
密码说明如图:<br/>
<img src="http://www.markss.cn/images/AprilBeacon/confirm-password.png" alt="" />
<img src="http://www.markss.cn/images/AprilBeacon/new-password.png" alt="" /></li>
</ul>


<h4>3、设置：设置beacon的发射器，后台推送等等。</h4>

<p> <img src="http://www.markss.cn/images/AprilBeacon/setting.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[易到用车iPhone端使用的第三方开源库]]></title>
    <link href="http://Mark-SS.github.io/blog/2014/04/09/yi-dao-yong-che-iphoneduan-shi-yong-de-di-san-fang-kai-yuan-ku/"/>
    <updated>2014-04-09T13:25:02+08:00</updated>
    <id>http://Mark-SS.github.io/blog/2014/04/09/yi-dao-yong-che-iphoneduan-shi-yong-de-di-san-fang-kai-yuan-ku</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a> 是一个负责管理iOS项目中第三方开源代码的工具。该项目开始于2011年8月12日，经过一年多的发展，现在已经超过1000次提交，并且持续保持活跃更新。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p></li>
<li><p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> 是一个轻量级的iOS网络通信类库，继ASI类库不在更新之后开发者们有一套不错选择。</p></li>
<li><p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> 是github去年开源的一个项目，是在iOS平台上对FRP的实现。FRP的核心是信号，信号在ReactiveCocoa(以下简称RAC)中是通过RACSignal来表示的，信号是数据流，可以被绑定和传递。</p></li>
<li><p><a href="https://github.com/yongche/egodatabase">EGODatabase</a> 是在FMDB基础之上引入了多线程的支持，另EGODatabase提供了异步数据库操作的支持，将数据库操作封装成数据库请求（其继承于NSOperation），数据库请求创建好了，丢到一个OperationQueue中被异步的进行执行，当请求数据完成之后 ，相应的delegate方法会被调用，然后你可以在主线程更新显示了。</p></li>
<li><p><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a> 主要作用为应用显示一个过渡的作用，常用于打开一个联网页面加载过程，防止出现假死现象，如果网速慢则告诉用户已经在很努力很努力的加载中。</p></li>
<li><p><a href="https://github.com/tonymillion/Reachability">Reachability</a> 是苹果官方给的检查网络状态的库。</p></li>
<li><p><a href="https://github.com/rs/SDWebImage">SDWebImage</a> 通过对UIImageView的类别扩展来实现异步加载替换图片的工作。</p></li>
<li><p><a href="https://github.com/yongche/yc-ios-voice">YCVoice</a> 是基于灵云SDK封装了一层。处理音频的转化。</p></li>
<li><p><a href="https://github.com/ckteebe/CustomBadge">CustomBadge</a> 是给UIView画角标用。</p></li>
<li><p><a href="https://github.com/danielamitay/DACircularProgress">DACircularProgressView</a> 自定义倒计时View。</p></li>
<li><p><a href="https://github.com/zootreeves/Objective-C-HMTL-Parser">Objective-C-HMTL-Parser</a> 是一个用 ObjectiveC 编写的简易 HTML 解析器。</p></li>
<li><p><a href="https://github.com/myang-git/QR-Code-Encoder-for-Objective-C">QR-Code-Encoder-for-Objective-C</a> 二维码的生成和扫描。</p></li>
<li><p><a href="https://github.com/youknowone/UI7Kit">UI7Kit</a> 是一个iOS7风格GUI工具包补丁。</p>

<pre><code>  BANG1165550992CB7536B6F77853XIANGUO 
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[associdated 关联对象]]></title>
    <link href="http://Mark-SS.github.io/blog/2014/04/03/associdated-guan-lian-dui-xiang/"/>
    <updated>2014-04-03T16:02:27+08:00</updated>
    <id>http://Mark-SS.github.io/blog/2014/04/03/associdated-guan-lian-dui-xiang</id>
    <content type="html"><![CDATA[<ul>
<li>给已有的类有类别（category）的方式扩展属性。知道类别的一个关键的事实是，它是不能够包括属性和成员变量的。但是可以通过 &lt;objc/runtime.h>中的函数关联属性。</li>
<li><p>例如我们一个UIViewController的类别。</p>

<pre><code>  #import &lt;UIKit/UIkit.h&gt;

  @interface UIViewController (YCCommon)

  @propery (nonatomic, strong) id associdatedObject;

  @end

  ----------------------------------------------------------------------------

  #import &lt;UIViewController+YCCommon&gt;  
  #import &lt;objc/runtime.h&gt;

  @implementation UIViewController (YCCommon)

  @dynamic associdatedObject;

  - (void)setAssocidatedObject:(id)object {  
      objc_setAssociatedObject(self, @selector(associdatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
  }

  - (id)associdatedObject {  
      objc_getAssociatedObject(self, @selector(associdatedObject));
  }


  @end

  //通常用static char key来标识属性最好 更简单的方式实现： 用上面的 selector

  static const void *kAssocitaedObjectKey = &amp;kAssocitaedObjectKey;

  - (void)setAssocidatedObject:(id)object {  
      objc_setAssociatedObject(self, kAssocitaedObjectKey, object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
  }

  - (id)associdatedObject {  
      objc_getAssociatedObject(self, kAssocitaedObjectKey);
  }
</code></pre></li>
<li><p>&lt;objc/runtime.h> 函数主要有</p></li>
<li>、 OBJC_EXPORT void <code>objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</code></li>
<li>OBJC_EXPORT id <code>objc_getAssociatedObject(id object, const void *key)</code></li>
<li><p>OBJC_EXPORT void <code>objc_removeAssociatedObjects(id object)</code></p></li>
<li><p>类别是扩展内核类，使用关联对象可以解决动态属性扩展实现。</p></li>
</ul>


<p>更多参考可以看 <a href="http://nshipster.cn/associated-objects">NSHipster</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[==与isEqual区别]]></title>
    <link href="http://Mark-SS.github.io/blog/2014/03/26/equals-equals-yu-isequalqu-bie/"/>
    <updated>2014-03-26T14:43:54+08:00</updated>
    <id>http://Mark-SS.github.io/blog/2014/03/26/equals-equals-yu-isequalqu-bie</id>
    <content type="html"><![CDATA[<ul>
<li>== 主要是比较两个内存地址是否相同。</li>
<li>isEqual 是比较两个数据对应<a href="http://www.baike.com/wiki/%E5%93%88%E5%B8%8C%E5%80%BC">哈希值</a>是否相同。</li>
<li><p>isEqual 首先判断两个对象是否类型一致，接着判断具体内容是否一致，如果类型不同直接return no。</p></li>
<li><p>通过NSString来比较这个问题</p>

<pre><code>  NSString *string1 = @"111";
  NSString *string2 = @"111";  

  打印内存地址
  NSLog@("string1 = %p, string2 = %p", string1, string2);
  string1 = 0xdd4ec, string2 = 0xdd4ec  
  所以 if (string1 == string2) return YES;  

  打印hash值  
  NSLog(@"hash stinrg1 = %d, string2 = %d ", [string1 hash], [string2 hash]);  
  hash string1 = 487555398, string2 = 487555398;

  所以 if ([string1 isEqual:string2]) return YES;

  --------------------------------------------------------------------------

  NSString *str1 = [[NSString alloc]initWithFormat:@"111"];  
  NSString *str2 = [[NSString alloc]initWithFormat:@"111"];

  打印内存地址  
  NSLog(@"内存  str1 = %p ,str2 = %p",str1,str2);
  内存 str1 = 0x1d888520 ,str2 = 0x1d888530
  所以 if (str1 == str2) return NO;

  打印hash值  
  NSLog(@"hash str1 = %d ,str2 = %d",[str1 hash],[str2 hash]);  
  hash str1 = 487555398 ,str2 = 487555398
  所以 if ([str1 isEqual:str2]) return YES;
</code></pre></li>
<li><p>通过UIImage来比较</p>

<pre><code>  UIImage* img1=[UIImage imageNamed:@"image.png"];  
  UIImage* img2=[UIImage imageNamed:@"image.png"];  

  打印内存地址  
  NSLog(@"img1 = %p , img2 = %p",img1,img2);      img1 = 0x1cd76320 , img2 = 0x1cd76320
  所以 if(img1 == img2) return YES;  

  打印hash值  
  NSLog(@"hash img1 = %d , img2 = %d",[img1 hash],[img2 hash]);  
  hash img1 = 483877664 , img2 = 483877664;  
  所以 if([img1 isEqual:img2]) return YES;
</code></pre></li>
<li><p>综上: == 相同时hash值一定相同， hash相同是 == 不一定相等。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三方类库]]></title>
    <link href="http://Mark-SS.github.io/blog/2014/03/13/di-san-fang-lei-ku/"/>
    <updated>2014-03-13T10:29:00+08:00</updated>
    <id>http://Mark-SS.github.io/blog/2014/03/13/di-san-fang-lei-ku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/lukabernardi/LBBlurredImage">LBBLurredImage</a> 是一个继承子UIImageView，轻而易举使图片模糊的项目。你将仅仅用一行海马来创建一个神奇的模糊效果。<center><img src="https://raw.github.com/lukabernardi/LBBlurredImage/master/Resources/SimulatorScreenshot.png" alt="" /></center></p>

<p><a href="https://gist.github.com/billyohgren/7944887">UILabel+ContentSize</a>在UILabel内计算内容的大小。</p>

<p><em>UILabel+ContentSize.h</em></p>

<pre><code>#import &lt;UIKit/UIkit.h&gt;

@interface UILabel (ContentSize)

- (CGSize)contentSize;

@end
</code></pre>

<p><em>UILabel+ContentSize.m</em></p>

<pre><code>#import "UILabel+ContentSize.h"

@implementation UILabel (ContentSize)

- (CGSize)contentsize {
    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    paragraphStyle.lineBreakMode = self.lineBreakMode;
    paragraphStyle.alignment = self.textAlignment;
    NSDictionary * attributes = @{NSFontAttributeName : self.font,
                                   NSParagraphStyleAttributeName : paragraphStyle};
                                    CGSize contentSize = [self.text 
                                    boundingRectWithSize:self.frame.size
                                                options:(NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading)
                                       attributes:attributes
                                          context:nil].size;
     return contentSize;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
